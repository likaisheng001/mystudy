思考题：
1.工厂类一定需要将构造方法私有化吗，为什么？
  工厂模式一般和单例模式结合使用。
  工厂类不一定需要将构造方法私有化，只有这个工厂类需要变成一个单例的时候，你才私有化。

2.用工厂模式设计支付业务场景，包含跨境支付，支付宝、微信、银联支付,并画出类图。
  暂不完成

面向抽象编程，面向接口编程。

------ 工厂模式 --------
简单工厂模式应用场景：
    Calendar.java > getInstance();
    org.slf4j.LoggerFactory > getLogger();
简单工厂的有点：
    只需传入一个正确的参数，就可以获取你所需要的对象，无须知道其创建的细节。
简单工厂的缺点：
    工厂类的职责相对过重，增加新的产品时需要修改工厂类的判断逻辑，违背开闭原则。
    不易于扩展过于复杂的产品结构。

工厂方法模式：
    工厂方法模式是指定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，
    工厂方法让类的实例化推迟到子类中进行。
工厂方法模式的优点：
    用户只需关心所需产品对应的工厂，无须关心创建细节。
    加入新产品符合开闭原则，提高了系统的可扩展性。
工厂方法模式的缺点：
    类的个数容易过多，增加了代码结构的复杂度。
    增加了系统的抽象性和理解难度。

抽象工厂模式(慎用)：
    抽象工厂模式是指提供一个创建一系列相关或相互依赖对象的接口，无须指定他们具体的类。
扩展：抽象工厂"产品等级结构"和"产品族"之间的概念。
      产品族：一些列的相关的产品，整合到一起有关联性。一个产品族(品牌)。
      产品等级：同一个继承体系。
      INote、IVedio -- 产品族
抽象工厂模式的优点：
    具体产品在应用层代码隔离，无须关系创建细节。
    将一个系列的产品族统一到一起创建。

总结：
    简单工厂：产品的工厂
    工厂方法：工厂的工厂
    抽象工厂：复杂产品的工厂
------ 工厂模式 --------
