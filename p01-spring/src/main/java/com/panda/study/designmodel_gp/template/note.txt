模板方法模式：
    模板方法模式通常又叫模板模式，是指定义一个算法骨架，并允许子类为其中的一个或者多个步骤提供实现。
    模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤。
    总结：模板方法模式，通过模板方法定义算法骨架，定义钩子方法，让用户实现算法差异。

模板模式的适用场景：
1.一次性实现一个算法不变的部分，并将可变的行为留给子类来实现。
2.各子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免代码重复。

模板模式在生活中的应用场景：
    如何把大象装进冰箱？

代码溯源：
    org.springframework.jdbc.core.JdbcTemplate
    java.util.AbstractList > get(int) 钩子方法
    javax.servlet.http.HttpServlet > doGet()/doPost() 钩子方法
    org.apache.ibatis.executor.BaseExecutor

模板模式的优点：
1.利用模板方法将相同处理逻辑的代码放到抽象父类中，可以提高代码的复用性。
2.将不同的代码通过钩子方法放到不同的子类中，通过对子类的扩展增加新的行为，提高代码的扩展性。
3.把不变的行为写在父类上，去除子类的重复代码，提供了一个很好的代码复用平台，符合开闭原则。

模板模式的缺点：
1.类数目的增加，每一个抽象类都需要一个子类来实现，这样导致类的个数增加。
2.类数量的增加，间接地增加了系统实现的复杂度。
3.继承关系自身缺点，如果父类添加新的抽象方法，所有子类都要改一遍。