观察者模式：
    观察者模式，又叫发布-订阅(Publish/Subscribe)模式、模型-识图(Model/View)模式、
    源-监听器(Source/Listener)模式或从属者(Dependents)模式。定义一种一对多的依赖关系，
    一个主题对象可被多个观察者对象同时监听，使得每当主题对象状态变化时，所有依赖于它的对象都会得到通知并被自动更新。
    总结：观察者不用主动观察被观察者，而是订阅观察者中心，当被观察者更新时，由观察者中心来通知调度。
         通过观察者模式，观察者不用在主动观察被观察者，而只是告诉观察者中心，由观察者中心来观察，自己自管等结果就好。
         观察者模式建立了一套触发机制，观察者模式的一个典型特征就是回调。
         监听器是通过事件回调来触发的。

观察者模式在生活场景中的应用：
    APP角标通知(被观察者-信息，观察者中心-微信，观察者-我们)
    起床闹钟设置(被观察者-时间,观察者中心-手机,观察者-我们)

观察者模式在源码中的应用：
    javax.servlet.ServletContextListener / org.springframework.web.context.ContextLoaderListener

观察者模式的优点：
1.观察者和被观察者是松耦合(抽象耦合)的，符合依赖倒置原则；
2.分离了表示层(观察者)和数据逻辑层(被观察者),并且建立了一套触发机制，使得数据的变化可以相应到多个表示层上；
3.实现了一对多的通讯机制，支持事件注册机制，支持兴趣分发机制，当被观察者触发事件时，只有感兴趣的观察者可以接收到通知。

观察者模式的缺点：
1.如果观察者数量过多，则事件通知会耗时较长；
2.事件通知呈线性关系，如果其中一个观察者处理事件卡壳，会影响后续的观察者接收该事件。
3.如果观察者和被观察者之间存在循环依赖，则可能造成两者之间的循环调用，导致系统崩溃。

扩展：
    guava,是谷歌对观察者模式的一个轻量级落地。